pipeline 
{ 
    environment 
    {  
      SonarHome = tool name: 'sonarscanner'
    }
    parameters 
    {
      string(name: 'applicatonName', defaultValue : 'taskManager', description: "Applicaton Name")
      choice(name: 'packageType', choices: 'npm\nmaven\npython\ngradle\ngo', description: 'Application Package Type')
      string(name: 'GitUrl', defaultValue : 'https://github.com/AnitaPK/taskManager.git', description: "Git repository Url")
      string(name: 'GitBranch', defaultValue : 'main', description: "Git repository branch name")
    }
    agent 
    {
       kubernetes {
       yaml '''
        apiAPP_VERSION: v1
        kind: Pod
        spec:
          containers:
          - name: hadolint
            image: hadolint/hadolint:latest-debian
            resources:
              requests:
                memory: "100Mi"
                cpu: "50m"
              limits:
                memory: "300Mi"
                cpu: "200m"
            command:
            - cat
            tty: true
          - name: git-secret
            image: bitbucketpipelines/git-secrets-scan:latest
            resources:
              requests:
                memory: "100Mi"
                cpu: "50m"
              limits:
                memory: "300Mi"
                cpu: "200m"
            command:
            - cat
            tty: true
          - name: gitversion
            image: gittools/gitversion:latest
            command:
            - cat
            tty: true
          - name: trufflehog
            image: trufflesecurity/trufflehog:latest
            resources:
              requests:
                memory: "100Mi"
                cpu: "50m"
              limits:
                memory: "300Mi"
                cpu: "200m"
            command:
            - cat
            tty: true
          - name: node
            image: node:19-alpine           
            tty: true
            command: ["/bin/sh"]
          - name: sonar
            image: emeraldsquad/sonar-scanner:latest         
            command:
            - cat
            tty: true
          - name: trivy
            image: aquasec/trivy:latest
            command:
            - cat
            tty: true
            volumeMounts:
              - mountPath: /var/run/docker.sock
                name: docker-sock
          - name: docker
            image: docker:latest
            resources:
              requests:
                memory: "10Mi"
                cpu: "10m"
              limits:
                memory: "300Mi"
                cpu: "200m"        
            command:
            - cat
            tty: true
            volumeMounts:
              - mountPath: /var/run/docker.sock
                name: docker-sock
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
        '''
      }
    }
    stages 
    {       
        stage('Clone Application Repository') 
        {
            steps 
            {
                git branch: GitBranch, url: GitUrl
            }
        }

        stage('Git-Secret Validation')
        {
            steps
            {
                script
                {
                    container('git-secret')
                    {
                        sh 'echo "Security check Staretd before build"'
                        echo "Checking for any secrets stored in the repo using git-secrets"
                        sh '''#!/bin/sh
                            git-secrets --scan -r $PWD
                            if [ "$?" -eq 1 ]; then
                                echo "CI Job Aborting as there is Secret Stored in the Repository."
                                exit 1
                            else
                                echo "No Secret found in the code"
                                echo "Proceed for next step....."
                            fi
                        '''
                    }
                }
            }
        }

        stage('Lint Dockerfile') 
        {
            steps 
            {
                script
                {
                    container('hadolint') 
                    {
                        sh 'ls -lrt '
                        sh 'hadolint $applicatonName/Dockerfile'
                        sh '''#!/bin/sh
                            if [ "$?" -eq 1 ]; then
                                echo "CI Job Aborting as there is vulnerability in the Dockerfile. Please check hadolint.txt file"
                                hadolint $applicatonName/Dockerfile | tee -a hadolint_lint.txt
                                cat hadolint_lint.txt
                                exit 1

                        '''
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'hadolint_lint.txt', onlyIfSuccessful: false
                    }
                }
            }
        }

        stage('Trufflehog Scanning')
        {
            steps
            {
                script
                {
                    container('trufflehog')
                    {
                        sh 'echo "trufflehog scanning started Staretd before build"'
                        echo "Checking for any secrets stored in the repo using trufflehog"
                        sh 'trufflehog filesystem --directory=$applicatonName --debug --json > trufflehog_report.json'
                        sh 'cat trufflehog_report.json'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'trufflehog_report.json', onlyIfSuccessful: true
                    }
                }
            }
        }

        stage('NPM Build') 
        {
            steps
            {
                script
                {   
                    container('node')
                    {
                      sh '''#!/bin/sh
                        cd $applicatonName
                        rm yarn.lock package-lock.json
                        yarn install && yarn cache clean
                      '''
                    }
                }
                
            }
        }

        stage('NPM Unit Test')
        {
          steps
           {
            script
                {
                    container('node')
                    {
                        try
                        {
                            sh '''#!/bin/sh
                              cd $applicatonName
                              yarn add nyc --dev
                              npm run coverage
                            '''
                        }
                        catch (exc)
                        {
                            echo 'Tests failed'
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Dependency Check (OWASP)') 
        {
          steps 
            {   
                dependencyCheck additionalArguments: "--cveValidForHours 48 --disableYarnAudit --disableNodeAudit --disableNodeAudit --prettyPrint --scan $applicatonName --format ALL ${fileExists('$applicatonName/owasp-suppression.xml') ? "--suppression $applicatonName/owasp-suppression.xml" : ""} --disableAssembly", odcInstallation: 'Dependency-check-v7.1.1'
                dependencyCheckPublisher pattern: ''
                archiveArtifacts allowEmptyArchive: true, artifacts: '**/dependency-check-report.*', onlyIfSuccessful: false
                sh "chmod -R 755 ./dependency-check-report.json"
                sh 'ls -lrt'
                sh 'cp ./dependency-check-report.* $version/Build-reports'
                sh 'cat $applicatonName/owasp-suppression.xml'
                sh 'cp $applicatonName/owasp-suppression.xml $version/Build-configuration'
            }
        }
    }
}
